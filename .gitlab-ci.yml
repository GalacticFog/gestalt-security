stages:
- test
- publish
- deploy

cache:
  key: "$CI_PIPELINE_ID"
  untracked: false

variables:
  POSTGRES_DB: gestalt-security
  POSTGRES_USER: gestaltdev
  POSTGRES_PASSWORD: letmein
  DATABASE_HOSTNAME: postgres
  DATABASE_NAME: gestalt-security
  DATABASE_PORT: "5432"
  DATABASE_USERNAME: gestaltdev
  DATABASE_PASSWORD: letmein
  ROOT_USERNAME: root
  ROOT_PASSWORD: letmein
  TEST_LDAP_URL: "ldap://galacticfog__test-ldap:389"
  TEST_LDAP_USER: admin
  TEST_LDAP_PASS: password
  DOCKER_IMG: "galacticfog/gestalt-security"

test:
  stage: test
  services:
    - postgres:9.4
    - galacticfog/test-ldap:0.1.0
  script:
    - sbt clean update test docker:stage
  artifacts:
    expire_in: 30 minutes
    paths:
    - target/docker/stage/

docker-publish:
  stage: publish
  script: 
    - VERSION=$(grep "^version" build.sbt | sed 's/.*:=[ ]*//' | sed 's/"//g')
    - DOCKER_TAG=${CI_BUILD_TAG-$VERSION-${CI_BUILD_REF:0:8}}
    - cd target/docker/stage
    - echo building $DOCKER_IMG:$DOCKER_TAG
    - docker build -t $DOCKER_IMG:$DOCKER_TAG .
    - docker push     $DOCKER_IMG:$DOCKER_TAG
    - docker rmi      $DOCKER_IMG:$DOCKER_TAG

github-publish:
  stage: publish
  script: 
    - git remote remove github || true
    - git remote add github https://$GITHUB_CREDENTIALS@github.com/GalacticFog/gestalt-security.git
    - |
      if [ -z ${CI_BUILD_TAG} ]; then 
         git push github HEAD:$CI_BUILD_REF_NAME
      else 
         git push -f github $CI_BUILD_TAG
      fi
  only:
    - master
    - /^release-.*$/
    - tags
  artifacts:

.deploy_template: &deploy_to_env
  image: galacticfog/gitlab-updater
  stage: deploy
  tags: 
    - test-cluster
  script: 
    - VERSION=$(grep "^version" build.sbt | sed 's/.*:=[ ]*//' | sed 's/"//g')
    - DOCKER_TAG=${CI_BUILD_TAG-$VERSION-${CI_BUILD_REF:0:8}}
    - /usr/local/bin/update-deployed-app.sh  marathon.mesos:8080 $DEPLOYID $DOCKER_IMG:$DOCKER_TAG
  allow_failure: true
  artifacts:

auto-deploy-master-to-test:
  <<: *deploy_to_env
  environment: test
  variables:
    DEPLOYID: test-gestalt-tasks/security
  only: 
    - master

manual-deploy-non-master-to-test:
  <<: *deploy_to_env
  environment: test
  variables:
    DEPLOYID: test-gestalt-tasks/security
  except: 
    - master
  when: manual

auto-deploy-master-to-int:
  <<: *deploy_to_env
  environment: int
  variables:
    DEPLOYID: sy-int-tasks/security
  only: 
    - master

manual-deploy-non-master-to-int:
  <<: *deploy_to_env
  environment: int
  variables:
    DEPLOYID: sy-int-tasks/security
  except: 
    - master
  when: manual
